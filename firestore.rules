rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is owner
    function isOwner() {
      return request.auth != null && 
             request.auth.uid != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['role']) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "owner";
    }

    // Users collection - allow owners to read for admin purposes
    match /users/{userId} {
      // Users can read/write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Owners can read all user documents for admin stats (only read operations)
      allow read: if request.auth != null && isOwner();
    }

    // User subcollections - keep private to user only
    match /users/{userId}/{documents=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // If you have other collections that need different rules, define them here.
    // For example, if you had a public 'sets' collection:
    // match /pokemonSets/{setId} {
    //   allow read: if true; // Anyone can read sets
    //   allow write: if false; // No one can write directly to sets from client
    // }
  }
}